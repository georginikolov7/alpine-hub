// <auto-generated />
using System;
using AlpineHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlpineHub.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241115114140_MergeMigrationsCustomIdentity")]
    partial class MergeMigrationsCustomIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlpineHub.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of user");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AlpineHub.Data.Models.Lift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AverageAscendTime")
                        .HasColumnType("int")
                        .HasComment("Average ascend time in minutes");

                    b.Property<TimeOnly>("ClosedHour")
                        .HasColumnType("time")
                        .HasComment("Closing hour of lift");

                    b.Property<TimeOnly>("LastRideFromBottomStationTime")
                        .HasColumnType("time")
                        .HasComment("Last time to ride lift from bottom station");

                    b.Property<TimeOnly>("LastRideFromTopStationTime")
                        .HasColumnType("time")
                        .HasComment("Last time to ride lift from top station");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasComment("Length of ski lift in meters");

                    b.Property<Guid>("LiftTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key for lift type relation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Name of ski lift");

                    b.Property<TimeOnly>("OpenningHour")
                        .HasColumnType("time")
                        .HasComment("Openning hour of lift");

                    b.Property<int>("VerticalAscend")
                        .HasColumnType("int")
                        .HasComment("Vertical ascend of lift in meters");

                    b.HasKey("Id");

                    b.HasIndex("LiftTypeId");

                    b.ToTable("Lifts");
                });

            modelBuilder.Entity("AlpineHub.Data.Models.LiftType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key of table");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of lift type");

                    b.HasKey("Id");

                    b.ToTable("LiftTypes");
                });

            modelBuilder.Entity("AlpineHub.Data.Models.PassAgeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key of table");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int")
                        .HasComment("Max age of client");

                    b.Property<int>("MinAge")
                        .HasColumnType("int")
                        .HasComment("Min age of client");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of age group");

                    b.HasKey("Id");

                    b.ToTable("PassAgeGroups");
                });

            modelBuilder.Entity("AlpineHub.Data.Models.PassPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key of table PassPeriods");

                    b.Property<int>("DaysCount")
                        .HasColumnType("int")
                        .HasComment("Number of days for pass validity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of pass period");

                    b.Property<int>("ValidFromHour")
                        .HasColumnType("int")
                        .HasComment("Starting hour of pass period");

                    b.Property<int>("ValidToHour")
                        .HasColumnType("int")
                        .HasComment("Ending hour of pass period");

                    b.HasKey("Id");

                    b.ToTable("PassPeriods");
                });

            modelBuilder.Entity("AlpineHub.Data.Models.PassType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key of table");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Discount of current pass type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("Name of pass type");

                    b.HasKey("Id");

                    b.ToTable("PassTypes");
                });

            modelBuilder.Entity("AlpineHub.Data.Models.Passes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key of table");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Flag for soft deletion");

                    b.Property<Guid>("PassAgeGroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key for pass age group");

                    b.Property<Guid>("PassPeriodId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key for pass period");

                    b.Property<Guid>("PassTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key for pass type");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Pass price. Pass type discount is automatically deduced");

                    b.Property<DateTime>("ValidFromDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start of validity period");

                    b.Property<DateTime>("ValidToDate")
                        .HasColumnType("datetime2")
                        .HasComment("End of validity period");

                    b.HasKey("Id");

                    b.HasIndex("PassAgeGroupId");

                    b.HasIndex("PassPeriodId");

                    b.HasIndex("PassTypeId");

                    b.ToTable("Passes");
                });

            modelBuilder.Entity("AlpineHub.Data.Models.Slope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int")
                        .HasComment("Slope difficulty enum");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit")
                        .HasComment("Flag indicating if slope is open");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasComment("Length of the slope in meters");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the slope");

                    b.Property<int>("SlopeCondition")
                        .HasColumnType("int")
                        .HasComment("Slope condition enum");

                    b.HasKey("Id");

                    b.ToTable("Slopes");
                });

            modelBuilder.Entity("AlpineHub.Data.Models.SlopeLift", b =>
                {
                    b.Property<Guid>("SlopeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of slope");

                    b.Property<Guid>("LiftId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of lift");

                    b.HasKey("SlopeId", "LiftId");

                    b.HasIndex("LiftId");

                    b.ToTable("SlopesLifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AlpineHub.Data.Models.Lift", b =>
                {
                    b.HasOne("AlpineHub.Data.Models.LiftType", "LiftType")
                        .WithMany("Lifts")
                        .HasForeignKey("LiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LiftType");
                });

            modelBuilder.Entity("AlpineHub.Data.Models.Passes", b =>
                {
                    b.HasOne("AlpineHub.Data.Models.PassAgeGroup", "PassAgeGroup")
                        .WithMany()
                        .HasForeignKey("PassAgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlpineHub.Data.Models.PassPeriod", "PassPeriod")
                        .WithMany()
                        .HasForeignKey("PassPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlpineHub.Data.Models.PassType", "PassType")
                        .WithMany()
                        .HasForeignKey("PassTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassAgeGroup");

                    b.Navigation("PassPeriod");

                    b.Navigation("PassType");
                });

            modelBuilder.Entity("AlpineHub.Data.Models.SlopeLift", b =>
                {
                    b.HasOne("AlpineHub.Data.Models.Lift", "Lift")
                        .WithMany()
                        .HasForeignKey("LiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlpineHub.Data.Models.Slope", "Slope")
                        .WithMany()
                        .HasForeignKey("SlopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lift");

                    b.Navigation("Slope");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AlpineHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AlpineHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlpineHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AlpineHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlpineHub.Data.Models.LiftType", b =>
                {
                    b.Navigation("Lifts");
                });
#pragma warning restore 612, 618
        }
    }
}
